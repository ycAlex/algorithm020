#要考虑特殊情况30
#如果都是合理的，如何处理两位合成一位：dp方程，如果能形成2位的，则就是dp[i-1]+dp[i-2]

def numDecodings(s):
    #首先先判断是否有字符串或者开头为0
    if not s or s[0] =='0':
        return 0
    #初始化dp方程，这里为1，1是因为，第二个1代表了s第一位只有一种情况
    #第一个1，则如果第二位能成立则为1+1
    dp = [1,1]
    
    for i in range(1,len(s)):
        #每次添加0，确保了如果中间有转换不了的情况，则最后的dp[-1]就是0-这是精髓
        dp.append(0)
        #如果当前位不为0，则当前位置的结果等于前一位
        if dp[i]!='0':
            dp[i+1] = dp[i]
        #如果当前位+前一位还合理，则加上前面的结果
        if s[i-1:i+1]>='10' and s[i-1:i+1]<'27':
            dp[i+1] +=dp[i-1]
           
    return dp[-1]
    

s = "226"

print(numDecodings(s))



